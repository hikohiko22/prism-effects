$area-size: 10;
$bg-gradient:rgba(0,0,0,0.1);

#prism-effects{
  width: 100vw;
  height:100vh;
  z-index:99999;
  mix-blend-mode: luminosity;
  background:radial-gradient(transparent 70%, rgba(0, 0, 0, 0.4) 100%);
  position:fixed;
  top:0;
//  pointer-events: none;

  .particle{
    height: 10px;
    background-color: #FFF;
    position: fixed;
    width: 15px;
    height: 15px;
    border-radius: 100%;
    filter: blur(2px);
    &::before,&::after{
      content: "";
      background: radial-gradient(#fff, transparent);
      display: block;
      width: 200px;
      left: -92.5px;
      top: 2.5px;
      position: absolute;
      height: 10px;
      border-radius: 100%;
    }
    &::before{
      transform: rotate(45deg);
    }
    &::after{
      transform: rotate(-45deg);
    }
  }

  .left,.right{
    position: fixed;
    height: 100vh;
    width: $area-size * 1vh;
  }
  .top,.bottom{
    position: fixed;
    width: 100vw;
    height: $area-size * 1vh;
  }
  .left{
    left: 0;
    .particle {
      @for $i from 1 through 100 {
        &:nth-child(#{$i}) {
          transform: translate(random($area-size - 1) * 1vh, random(100) * 1vh);
        }
      }
    }
  }
  .right{
    right: 0;
    .particle {
      @for $i from 1 through 100 {
        &:nth-child(#{$i}) {
          transform: translate(random($area-size - 1) * 1vh, random(100) * 1vh);
        }
      }
    }
  }
  .top{
    top: 0;
    .particle {
      @for $i from 1 through 100 {
        &:nth-child(#{$i}) {
          transform: translate((random(100 - $area-size) + $area-size / 2 ) * 1vw, random($area-size - 1) * 1vh);
        }
      }
    }
  }
  .bottom{
    bottom: 0;
    .particle {
      @for $i from 1 through 100 {
        &:nth-child(#{$i}) {
          transform: translate((random(100 - $area-size) + $area-size / 2 ) * 1vw , random($area-size - 1 ) * 1vh);
        }
      }
    }
  }

}

